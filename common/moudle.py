import os
import lxml.etree as ET

def create_setting_file(path):
    if os.path.isfile(path + '.setting'):
        return 701

    if os.path.isfile(path + '.setting.xml'):
        return 702

    try:
        root = ET.Element("root")
        
        tree = ET.ElementTree(root)
        tree.write(path + '.setting.xml', xml_declaration=True, pretty_print=True)

        file = open(path + '.setting', 'w')

        file.write('#This is a setting maker file\n#This file is autogenerated!\n#Please use provided tools for editing and be cautious when editing it manually!\n')

        file.close()

        return 200

    except Exception as e:

        try:
            os.remove(path + '.setting.xml')
        except OSError:
            pass

        try:
            os.remove(path + '.setting')
        except OSError:
            pass

        return e


def verfy_file(path):
    """Verfies that path has .setting and .setting.xml file for the given file name.
    
    ** returns name.setting path if file is verfied.
       700: Chosen file is not a setting maker file,
       701: .setting file missing,
       702: .setting.xml file missing"""

    if path[-12:] == '.setting.xml':
        if os.path.isfile(path[:-4]):
            return path[:-4]
        else:
           return 701

    elif path[-8:] == '.setting':
        if os.path.isfile(path + '.xml'):
            return path
        else:
           return 702
    else:
        if not os.path.isfile(path + '.setting') and not os.path.isfile(path + '.setting.xml'):
            return 700
        elif not os.path.isfile(path + '.setting'):
            return 701
        elif not os.path.isfile(path + '.setting.xml'):
            return 702
        else:
            return path + '.setting'


def setting_exists_in_file(path_of_dot_setting, name):
    file = open(path_of_dot_setting, 'r')

    for line in file.readlines():
        if line[0] == '#' or line[0] == ' ' or line[0] == '\n':
            pass
        elif name.upper().strip() == line[:line.find(':')].upper().strip():
            return True

    return False

    file.close()

def get_setting_names_in_file(path_of_dot_setting):
    
    name_list = []

    if os.path.isfile(path_of_dot_setting):
        file = open(path_of_dot_setting, 'r')

        for line in file.readlines():
            if line[0] != '#' and line[0] != ' ' and line[0] != '\n':
                name_list.append(line.split(':')[0])

        file.close()

    return name_list


def add_setting_to_file(path_to_dot_setting, name, comment):
    file = open(path_to_dot_setting, 'a')

    file.write('#' + comment + '\n' + name + ':\n')

    file.close()

    parser = ET.XMLParser(remove_blank_text=True)

    tree = ET.parse(path_to_dot_setting + '.xml', parser)

    root = tree.getroot()
                      
    if root.find("setting[@name='" + name.lower() + "']") == None:
        element = ET.Element("setting", name=name.lower())
        element.text = comment
        root.append(element)
        
        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nSetting created successfully\n')
    else:
        print('\nCaution: Definition for setting ' + name + ' already exists in setting.xml file\n')

def remove_setting_from_file(path_to_dot_setting, name):
    file_r = open(path_to_dot_setting, 'r')
    file_temp = open(path_to_dot_setting + '.temp', 'w')

    file_r_contents = file_r.readlines()

    skip = False

    for i in range(len(file_r_contents)):
        if skip == True:
            skip = False
            continue
        elif file_r_contents[i][0] == ' ' or file_r_contents[i][0] == '\n':
            pass
        elif file_r_contents[i][0] == '#' and file_r_contents[i+1][0] != '#':
            if name.upper().strip() == file_r_contents[i+1][:file_r_contents[i+1].find(':')].upper().strip():
                skip = True
            else:
                file_temp.write(file_r_contents[i])
        else:
            file_temp.write(file_r_contents[i])

    file_r.close()
    file_temp.close()

    os.remove(path_to_dot_setting)
    os.rename(path_to_dot_setting + '.temp', path_to_dot_setting)

    parser = ET.XMLParser(remove_blank_text=True)

    tree = ET.parse(path_to_dot_setting + '.xml', parser)

    root = tree.getroot()
    
    element = root.find("setting[@name='" + name.lower().strip() + "']")

    if element != None:
        root.remove(element)

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nSetting removed successfully\n')
    else:
        print("\nCaution: Setting removed successfully but Setting '" + name + "' didn't exist in setting.xml file.\n"
                "It causes no problem in removing but means that your .setting.xml was corrupted.\n")


def change_setting_name(path_to_dot_setting, current_name, new_name):
    file_r = open(path_to_dot_setting, 'r')
    file_temp = open(path_to_dot_setting + '.temp', 'w')

    for line in file_r.readlines():
        if line[0] == ' ' or line[0] == '\n':
            pass
        elif current_name.upper().strip() == line[:line.find(':')].upper().strip() and line[0] != '#':
            file_temp.write(new_name.strip() + line[line.find(':'):])
        else:
            file_temp.write(line)

    file_r.close()
    file_temp.close()

    os.remove(path_to_dot_setting)
    os.rename(path_to_dot_setting + '.temp', path_to_dot_setting)

    parser = ET.XMLParser(remove_blank_text=True)

    tree = ET.parse(path_to_dot_setting + '.xml', parser)

    root = tree.getroot()
    
    element = root.find("setting[@name='" + new_name.lower().strip() + "']")

    if element != None:
        root.remove(element)

    element = root.find("setting[@name='" + current_name.lower().strip() + "']")

    if element == None:#This can only happen if .xml file is altered manually

        file_r = open(path_to_dot_setting, 'r')

        file_r_contents = file_r.readlines()
        
        comment = ''

        for i in range(len(file_r_contents)):
            if file_r_contents[i][0] == '#' and file_r_contents[i+1][0] != '#':
                if new_name.upper().strip() == file_r_contents[i+1][:file_r_contents[i+1].find(':')].upper().strip():
                    comment = file_r_contents[i][1:].replace('\n', '')
                    break

        file_r.close()

        element = ET.Element("setting", name=new_name.lower().strip())
        element.text = comment
        root.append(element)

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nName changed successfully.\nCaution: Setting name was not found in .setting.xml file, file could be corrupted\n')
    
    else:

        element.attrib['name'] = new_name.lower()

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nName changed successfully.\n')


def set_default(path_to_dot_setting, setting_name, default_value):
    file_r = open(path_to_dot_setting, 'r')
    file_temp = open(path_to_dot_setting + '.temp', 'w')

    for line in file_r.readlines():
        if line[0] == ' ' or line[0] == '\n':
            pass
        elif setting_name.upper().strip() == line[:line.find(':')].upper().strip() and line[0] != '#':
            if line.split(':')[1].strip() == '':
                file_temp.write(line[:line.find(':')] + ':' + default_value + '\n')
            else:
                file_temp.write(line)
        else:
            file_temp.write(line)

    file_r.close()
    file_temp.close()

    os.remove(path_to_dot_setting)
    os.rename(path_to_dot_setting + '.temp', path_to_dot_setting)

    parser = ET.XMLParser(remove_blank_text=True)

    tree = ET.parse(path_to_dot_setting + '.xml', parser)

    root = tree.getroot()
    
    element = root.find("setting[@name='" + setting_name.lower().strip() + "']")

    if element == None:#This can only happen if .xml file is altered manually

        file_r = open(path_to_dot_setting, 'r')

        file_r_contents = file_r.readlines()
        
        comment = ''

        for i in range(len(file_r_contents)):
            if file_r_contents[i][0] == '#' and file_r_contents[i+1][0] != '#':
                if setting_name.upper().strip() == file_r_contents[i+1][:file_r_contents[i+1].find(':')].upper().strip():
                    comment = file_r_contents[i][1:].replace('\n', '')
                    break

        file_r.close()

        element = ET.Element("setting", name=setting_name.lower().strip())
        element.attrib['default']=default_value
        element.text = comment
        root.append(element)

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nDefault value set successfully.\nCaution: Setting name was not found in .setting.xml file, file could be corrupted\n')
    
    else:

        element.attrib['default'] = default_value

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nDefault value set successfully.\n')


def set_setting_comment(path_to_dot_setting, setting_name, comment):
    file_r = open(path_to_dot_setting, 'r')
    file_temp = open(path_to_dot_setting + '.temp', 'w')

    file_r_contents = file_r.readlines()

    for i in range(len(file_r_contents)):
        if file_r_contents[i][0] == '#' and file_r_contents[i+1][0] != '#':
            if setting_name.upper().strip() == file_r_contents[i+1][:file_r_contents[i+1].find(':')].upper().strip():
                file_temp.write('#' + comment + '\n')

            else:
                file_temp.write(file_r_contents[i])
        
        else:
            file_temp.write(file_r_contents[i])


    file_r.close()
    file_temp.close()

    os.remove(path_to_dot_setting)
    os.rename(path_to_dot_setting + '.temp', path_to_dot_setting)

    parser = ET.XMLParser(remove_blank_text=True)

    tree = ET.parse(path_to_dot_setting + '.xml', parser)

    root = tree.getroot()
    
    element = root.find("setting[@name='" + setting_name.lower().strip() + "']")

    if element == None:#This can only happen if .xml file is altered manually

        element = ET.Element("setting", name=setting_name.lower().strip())
        element.text = comment
        root.append(element)

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nComment set successfully.\nCaution: Setting name was not found in .setting.xml file, file could be corrupted\n')
    
    else:

        element.text = comment

        tree.write(path_to_dot_setting + '.xml', xml_declaration=True, pretty_print=True)

        print('\nComment set successfully.\n')

